{"version":3,"sources":["components/content.component.js","components/nav.component.js","components/social-media.component.js","entry-point.component.js","serviceWorker.js","index.js"],"names":["Content","props","className","Navigation","id","hideMobile","SocialMedia","href","EntryPoint","React","Component","Boolean","window","location","hostname","match","wrapper","document","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2UAWeA,G,WAPC,SAACC,GACf,OACE,yBAAKC,UAAU,+CACb,yBAAKA,UAAU,oBCkBNC,G,YApBI,SAACF,GAClB,OACE,yBAAKC,UAAU,sEACb,yBAAKA,UAAU,kCACb,wBAAIA,UAAU,qBAAd,cACA,yBAAKA,UAAU,oBACb,wBAAIE,GAAG,cAAP,cACA,wBAAIA,GAAG,YAAP,YACA,wBAAIA,GAAG,aAAP,aACA,wBAAIA,GAAG,WAAP,aAGJ,yBAAKF,UAAU,4CACb,kBAAC,EAAD,CAAaG,YAAY,QCJlBC,G,MAVK,SAACL,GACnB,OACE,yBAAKC,UAAU,oDACb,uBAAGK,KAAK,sDAAqD,uBAAGL,UAAU,8BAC1E,uBAAGK,KAAK,gCAA+B,uBAAGL,UAAU,2BACpD,uBAAGK,KAAK,6BAA4B,uBAAGL,UAAU,gCCWxCM,G,4KAXX,OACE,yBAAKN,UAAU,gBACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GANeO,IAAMC,YCKXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EAAUC,SAASC,eAAe,QACpCF,GACFG,IAASC,OAAO,kBAAC,IAAMC,WAAP,KAAkB,kBAAC,EAAD,OAAmCL,GD0HjE,kBAAmBM,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.69b7063f.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/partials/_content.scss';\nimport '../styles/partials/_flaticon.scss';\n\nconst Content = (props) => {\n  return (\n    <div className=\"col col-lg-8 col-12 container-fluid content\">\n      <div className=\"content-item\"></div>\n    </div>);\n}\n\nexport default Content; ","import React from 'react';\nimport { SocialMedia } from './index';\nimport '../styles/partials/_navigation.scss';\nimport '../styles/flaticon.css';\n\nconst Navigation = (props) => {\n  return (\n    <div className=\"col col-xl-3 col-lg-4 col-12 py-lg-3 row navigation position-fixed\">\n      <div className=\"col col-md-12 align-self-start\">\n        <h1 className=\"underlined padded\">website.v2</h1>\n        <div className=\"navigation-links\">\n          <h3 id=\"experience\">experience</h3>\n          <h3 id=\"projects\">projects</h3>\n          <h3 id=\"education\">education</h3>\n          <h3 id=\"contact\">contact</h3>  \n        </div>\n      </div>\n      <div className=\"col col-md-12 align-self-end hide-mobile\">\n        <SocialMedia hideMobile={true}/>\n      </div>\n      {/* toggle close component */}\n    </div>\n  );\n}\n\nexport default Navigation;","import React from 'react';\nimport '../styles/partials/_social-links.scss';\nimport '../styles/partials/_flaticon.scss';\n\nconst SocialMedia = (props) => {\n  return (\n    <div className=\"social-media-links d-flex justify-content-center\">\n      <a href=\"https://www.linkedin.com/in/joseph-witt-52a960171/\"><i className=\"flaticon-linkedin medium\"></i></a>\n      <a href=\"mailto:jackwittbiz@gmail.com\"><i className=\"flaticon-email medium\"></i></a>\n      <a href=\"https://github.com/jQwitt\"><i className=\"flaticon-browser medium\"></i></a>\n    </div>\n  );\n};\n\nexport default SocialMedia;","import React from 'react';\nimport { \n  Navigation,\n  Content\n} from './components/index';\nimport './styles/partials/_common.scss';\n\nclass EntryPoint extends React.Component{\n  render() {\n    return (\n      <div className=\"container-xl\">\n        <div className=\"row\">\n          <Navigation />\n          <Content />\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default EntryPoint;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport EntryPoint from './entry-point.component';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/partials/_common.scss';\n// import './styles/partials/_flaticon.scss'; - webpack error FIX\n\nconst wrapper = document.getElementById(\"root\");\nif (wrapper) {\n  ReactDOM.render(<React.StrictMode><EntryPoint /></React.StrictMode>, wrapper);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}